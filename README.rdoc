= irbtools
This is a meta gem that installs useful irb gems and configures your irb. It has a modular structure and supports multiple library-loading mechanisms, e.g. via <tt>autoload</tt> or threads.

== Setup
  gem install irbtools
  
* On Linux, you need +xclip+ or +xsel+ to use the clipboard: sudo <tt>apt-get install xclip</tt>
* On Windows, you need ansicon[https://github.com/adoxa/ansicon] to enjoy all the colors
* On MacOS, you will need growl, if you want to use the +g+ gem.

=== Wrong display widths?
When using double-width unicode chars, you should need to pass the <tt>:east_asian_width = true</tt> when starting <tt>FancyIrb</tt>. It is deactivated because of performance issues.

== Usage
To use it, put the following in your <tt>~/.irbrc</tt> file (this file is loaded every time you start an irb):

  require 'rubygems' unless defined? Gem # rubygems is only needed in 1.8
  require 'irbtools'

If it does not exist, just create a new one.

It's possible to modify, which libraries get loaded:

  # don't require 'irbtools'
  require 'irbtools/configure'
  # here you can modify which libraries get loaded (see below)
  Irbtools.start

You can also deactivate the loading of the complete default set of irbtools libraries by using <tt>require 'irbtools/minimal'</tt> instead of <tt>configure</tt>. You need to use the below methods for adding libraries in this case, or it won't modify anything of your irb ;).

=== Rails notes
To use irbtools within the rails console, you will have to add irbtools to your Gemfile <b>in this way:</b> (or there will be some bundler double require issues..)

  gem 'irbtools', :require => 'irbtools/configure'

You can put Rails specific configuration in a <tt>~/.railsrc</tt> file which gets loaded only in Rails environments.

=== How to load more or less libraries
You have the following ways:
* <tt>Irbtools.add_library(lib, options_hash, &block)</tt>
* <tt>Irbtools.remove_library(lib)</tt>

The <tt>options_hash</tt> defines the way in which Irbtools loads the library. Following options are possible
* (no options)/<tt>:start</tt> - The library is required on startup before doing anything else
 (before displaying the prompt)
* <tt>:thread => identifier</tt> - After loading everything else, the library is required in a thread (while continuing loading). You can choose any identifier, but if you take the same one for multiple libraries, they will be loaded in the same thread (in the order that you define)
* <tt>:late => true</tt> - The library is required just before showing the prompt (note: loading threads might still be in process)
* <tt>:late_thread => identifier</tt> - Same as <tt>:thread</tt>, but after loading late libraries.
* <tt>:sub_session => true</tt> - The library is loaded every time a sub-session starts (using <tt>IRB.conf[:IRB_RC]</tt>). In ripl[https://github.com/cldwalker/ripl], <tt>ripl-after_rc</tt> is used.
* <tt>:autoload => :Constant</tt> - Use Ruby's <tt>autoload</tt> feature. It loads the library as soon as the constant is encountered.

You can also apply a block that gets executed after the library is loaded (except for autoload, the code will executed on startup in this case).

When adding a new library, you should consider adding it via autoload, try loading it via thread if autoload is not suitable and fallback to some other method, if not via thread is not possible.

See the <tt>Irbtools.libraries</tt> hash for the current Irbtools configuration that actually will be used when calling <tt>Irbtools.start</tt>.

==== Packages
There are irbtools extension packages, which can be modified via:
* <tt>Irbtools.add_package(pkg)</tt>
* <tt>Irbtools.remove_package(pkg)</tt>

These packages add/modify the libraries to be loaded. For an example, see {irbtools-more}[https://github.com/janlelis/irbtools-more].

== Features
See http://rbjl.net/40-irbtools-release-the-power-of-irb or read the commented source files.

=== Included gems and libraries
* wirb[https://github.com/janlelis/wirb/]      colorize output
* hirb[http://tagaholic.me/2009/03/13/hirb-irb-on-the-good-stuff.html]     (active record) tables and custom views for specific objects
* fancy_irb[https://github.com/janlelis/fancy_irb]   put result as comment and more colorization
* every_day_irb[https://github.com/janlelis/irbtools/tree/master/lib/every_day_irb.rb]   helper methods that might be useful in every-day irb usage, e.g.: ls, cat, rq, rrq, ld, session_history, reset!, clear, dbg
* clipboard[http://github.com/janlelis/clipboard]     easy clipboard access (copy & paste)
* interactive_editor[https://github.com/jberkel/interactive_editor]    lets you open vim, hack something, and it gets loaded into the current session, also possible: yaml object editing
* sketches[http://sketches.rubyforge.org/]   another, more flexible "start editor and it gets loaded into your irb session" plugin
* zucker[http:/rubyzucker.info]   nice debug printing (q, o, c, .m, .d) + useful pseudo-constants (Info, OS, RubyVersion, RubyEngine)
* ap[https://github.com/michaeldv/awesome_print]      nice debug printing (ap) [also see wp from wirb/wp]
* coderay[http://coderay.rubychan.de/]    some colorful code displaying ;)
* boson[http://tagaholic.me/boson/]  commands repository (commands also work in the shell!)
* methodfinder[https://github.com/citizen428/methodfinder] interesting method finder (mf)
* *fileutils* (stdlib) cd, pwd, ln_s, mv, rm, mkdir, touch ... ;)

=== Not included anymore

* guessmethod[http://guessmethod.rubyforge.org/]    automatically corrects typos (method_missing hook)

==== RVM
If you have RVM installed, you can switch your gemset or ruby with <tt>gemset</tt> and <tt>use</tt> (use <tt>gemsets</tt> and <tt>rubies</tt> to get a list). The gemset can be changed within the session, while changing ruby starts a new one. Please also note that you need to have installed irbtools for that ruby version. I recommend installing it in the <tt>global</tt> gemset.

== Hint: Faster start-up

You can get an about a second faster start-up time by changing the loading methods for wirb and fancy_irb to <tt>:thread</tt> (drawback: the hash rocket will not be used for the first result):

  require 'irbtools/configure'
  Irbtools.remove_library :wirb
  Irbtools.remove_library :fancy_irb
  Irbtools.add_library :wirb, :thread => -1 do Wirb.start end
  Irbtools.add_library :fancy_irb, :thread => -1 do FancyIrb.start end
  Irbtools.start

== Welcome message
The welcome message can be customized with <tt>Irbtools.welcome_message=</tt>

== Copyright
Copyright (c) 2010-2011 Jan Lelis, http://rbjl.net, released under the MIT license.

J-_-L
